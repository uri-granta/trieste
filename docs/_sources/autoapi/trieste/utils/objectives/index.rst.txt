:mod:`trieste.utils.objectives`
===============================

.. py:module:: trieste.utils.objectives

.. autoapi-nested-parse::

   This module contains toy objective functions, useful for experimentation. A number of them have been
   taken from `this Virtual Library of Simulation Experiments
   <https://www.sfu.ca/~ssurjano/optimization.html>`_.



Module Contents
---------------

.. function:: branin(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Branin-Hoo function, rescaled to have zero mean and unit variance over :math:`[0, 1]^2`. See
   :cite:`Picheny2013` for details.

   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: BRANIN_MINIMIZERS
   

   The three global minimizers of the :func:`branin` function over :math:`[0, 1]^2`, with shape [3, 2]
   and dtype float64.


.. data:: BRANIN_MINIMUM
   

   The global minimum of the :func:`branin` function, with shape [1] and dtype float64. 


.. function:: gramacy_lee(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Gramacy & Lee function, typically evaluated over :math:`[0.5, 2.5]`. See
   :cite:`gramacy2012cases` for details.

   :param x: Where to evaluate the function, with shape [..., 1].
   :return: The function values, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: GRAMACY_LEE_MINIMIZER
   

   The global minimizer of the :func:`gramacy_lee` function over :math:`[0.5, 2.5]`, with shape [1, 1]
   and dtype float64.


.. data:: GRAMACY_LEE_MINIMUM
   

   The global minimum of the :func:`gramacy_lee` function over :math:`[0.5, 2.5]`, with shape [1] and
   dtype float64.


.. function:: logarithmic_goldstein_price(x: trieste.type.TensorType) -> trieste.type.TensorType

   A logarithmic form of the Goldstein-Price function, with zero mean and unit variance over
   :math:`[0, 1]^2`. See :cite:`Picheny2013` for details.

   :param x: The points at which to evaluate the function, with shape [..., 2].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: LOGARITHMIC_GOLDSTEIN_PRICE_MINIMIZER
   

   The global minimizer for the :func:`logarithmic_goldstein_price` function, with shape [1, 2] and
   dtype float64.


.. data:: LOGARITHMIC_GOLDSTEIN_PRICE_MINIMUM
   

   The global minimum for the :func:`logarithmic_goldstein_price` function, with shape [1] and dtype
   float64.


.. function:: hartmann_3(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Hartmann 3 test function over :math:`[0, 1]^3`. This function has 3 local
   and one global minima. See https://www.sfu.ca/~ssurjano/hart3.html for details.

   :param x: The points at which to evaluate the function, with shape [..., 3].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: HARTMANN_3_MINIMIZER
   

   The global minimizer for the :func:`hartmann_3` function, with shape [1, 3] and
   dtype float64.


.. data:: HARTMANN_3_MINIMUM
   

   The global minimum for the :func:`hartmann_3` function, with shape [1] and dtype
   float64.


.. function:: shekel_4(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Shekel test function over :math:`[0, 1]^4`. This function has ten local
   minima and a single global minimum. See https://www.sfu.ca/~ssurjano/shekel.html for details.
   Note that we rescale the original problem, which is typically defined
   over `[0, 10]^4`.

   :param x: The points at which to evaluate the function, with shape [..., 4].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: SHEKEL_4_MINIMIZER
   

   The global minimizer for the :func:`shekel_4` function, with shape [1, 4] and
   dtype float64.


.. data:: SHEKEL_4_MINIMUM
   

   The global minimum for the :func:`shekel_4` function, with shape [1] and dtype
   float64.


.. function:: rosenbrock_4(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Rosenbrock function, rescaled to have zero mean and unit variance over :math:`[0, 1]^4. See
   :cite:`Picheny2013` for details.
   This function (also known as the Banana function) is unimodal, however the minima
   lies in a narrow valley.

   :param x: The points at which to evaluate the function, with shape [..., 4].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: ROSENBROCK_4_MINIMIZER
   

   The global minimizer for the :func:`rosenbrock_4` function, with shape [1, 4] and
   dtype float64.


.. data:: ROSENBROCK_4_MINIMUM
   

   The global minimum for the :func:`rosenbrock_4` function, with shape [1] and dtype
   float64.


.. function:: ackley_5(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Ackley test function over :math:`[0, 1]^5`. This function has
   many local minima and a global minima. See https://www.sfu.ca/~ssurjano/ackley.html
   for details.
   Note that we rescale the original problem, which is typically defined
   over `[-32.768, 32.768]`.

   :param x: The points at which to evaluate the function, with shape [..., 5].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: ACKLEY_5_MINIMIZER
   

   The global minimizer for the :func:`ackley_5` function, with shape [1, 5] and
   dtype float64.


.. data:: ACKLEY_5_MINIMUM
   

   The global minimum for the :func:`ackley_5` function, with shape [1] and dtype
   float64.


.. function:: hartmann_6(x: trieste.type.TensorType) -> trieste.type.TensorType

   The Hartmann 6 test function over :math:`[0, 1]^6`. This function has
   6 local and one global minima. See https://www.sfu.ca/~ssurjano/hart6.html
   for details.

   :param x: The points at which to evaluate the function, with shape [..., 6].
   :return: The function values at ``x``, with shape [..., 1].
   :raise ValueError (or InvalidArgumentError): If ``x`` has an invalid shape.


.. data:: HARTMANN_6_MINIMIZER
   

   The global minimizer for the :func:`hartmann_6` function, with shape [1, 6] and
   dtype float64.


.. data:: HARTMANN_6_MINIMUM
   

   The global minimum for the :func:`hartmann_6` function, with shape [1] and dtype
   float64.


.. function:: mk_observer(objective: collections.abc.Callable[[trieste.type.TensorType], trieste.type.TensorType]) -> trieste.observer.SingleObserver
              mk_observer(objective: collections.abc.Callable[[trieste.type.TensorType], trieste.type.TensorType], key: str) -> trieste.observer.MultiObserver

   :param objective: An objective function designed to be used with a single data set and model.
   :param key: An optional key to use to access the data from the observer result.
   :return: An observer returning the data from ``objective``.


